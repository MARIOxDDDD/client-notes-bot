from flask import Flask, request
import telebot
import os
import time
import json
from waitress import serve
from telebot.types import BotCommand

TOKEN = "7598214399:AAG18_9UqZoIys83qQalyXhAmhhvofZficA"
SERVICE_NAME = "client-notes-bot"
WEBHOOK_URL = f"https://{SERVICE_NAME}.onrender.com/{TOKEN}"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)
DATA_FILE = "clients.json"

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_clients():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª
def save_clients():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(clients, f, indent=2, ensure_ascii=False)

clients = load_clients()

# üìã –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
bot.set_my_commands([
    BotCommand("add", "‚ûï –î–æ–±–∞–≤–∏—Ç—å"),
    BotCommand("find", "üîç –ù–∞–π—Ç–∏"),
    BotCommand("list", "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"),
    BotCommand("edit", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
    BotCommand("delete", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
])

# üîÑ –í–µ–±—Ö—É–∫
bot.remove_webhook()
time.sleep(1)
bot.set_webhook(url=WEBHOOK_URL)

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ production-—Å–µ—Ä–≤–µ—Ä!"

# –ö–æ–º–∞–Ω–¥—ã

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=["add"])
def add_client(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –Ω–æ–º–µ—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(msg, save_client)

def save_client(message):
    try:
        name, number, desc = map(str.strip, message.text.split(","))
        clients[number[-4:]] = {"name": name, "number": number, "desc": desc}
        save_clients()
        bot.send_message(message.chat.id, f"‚úÖ –ö–ª–∏–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –ò–º—è, –ù–æ–º–µ—Ä, –û–ø–∏—Å–∞–Ω–∏–µ")

@bot.message_handler(commands=["find"])
def find_client(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, search_client)

def search_client(message):
    key = message.text.strip()
    client = clients.get(key)
    if client:
        bot.send_message(message.chat.id, f"üë§ {client['name']}\nüìû {client['number']}\nüíá {client['desc']}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=["list"])
def list_clients(message):
    if not clients:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    text = "\n\n".join([f"{v['name']} ({v['number']})\nüíá {v['desc']}" for v in clients.values()])
    bot.send_message(message.chat.id, f"üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n{text}")

@bot.message_handler(commands=["delete"])
def delete_client(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, delete_by_number)

def delete_by_number(message):
    key = message.text.strip()
    if key in clients:
        deleted = clients.pop(key)
        save_clients()
        bot.send_message(message.chat.id, f"üóë –ö–ª–∏–µ–Ω—Ç {deleted['name']} —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=["edit"])
def edit_client(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, edit_step)

def edit_step(message):
    key = message.text.strip()
    if key in clients:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:")
        bot.register_next_step_handler(msg, lambda m: apply_edit(m, key))
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def apply_edit(message, key):
    clients[key]['desc'] = message.text.strip()
    save_clients()
    bot.send_message(message.chat.id, f"‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {clients[key]['desc']}")

# üîå –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    serve(app, host="0.0.0.0", port=10000)
