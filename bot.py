from flask import Flask, request
import telebot
import psycopg2
import pandas as pd
from telebot import types
from datetime import datetime
from waitress import serve

# === –ö–û–ù–§–ò–ì ===
TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
DATABASE_URL = "postgresql://client_notes_db_user:ujSU0BBRQ6swQwzRLwZ315LFWmYomGcn@dpg-d0p2rnuuk2gs7398b9s0-a/client_notes_db"
WEBHOOK_URL = f"https://client-notes-bot.onrender.com/{TOKEN}"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
conn = psycopg2.connect(DATABASE_URL, sslmode="require")
cur = conn.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS clients (
    id SERIAL PRIMARY KEY,
    name TEXT,
    phone TEXT,
    comment TEXT,
    created_at TIMESTAMP DEFAULT NOW()
)
""")
conn.commit()

user_states = {}

# === –ú–ï–ù–Æ ===
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ù–∞–π—Ç–∏")
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
    markup.add("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å")
    return markup

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# === –î–û–ë–ê–í–ò–¢–¨ –ö–õ–ò–ï–ù–¢–ê ===
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_client(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    user_states[message.chat.id] = {"step": "name"}

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "name")
def step_name(message):
    user_states[message.chat.id]["name"] = message.text
    user_states[message.chat.id]["step"] = "phone"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "phone")
def step_phone(message):
    user_states[message.chat.id]["phone"] = message.text
    user_states[message.chat.id]["step"] = "comment"
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "comment")
def step_comment(message):
    state = user_states.pop(message.chat.id)
    cur.execute("INSERT INTO clients (name, phone, comment) VALUES (%s, %s, %s)",
                (state["name"], state["phone"], message.text))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())

# === –ü–û–ò–°–ö ===
@bot.message_handler(func=lambda m: m.text == "üîç –ù–∞–π—Ç–∏")
def find_client(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")
    user_states[message.chat.id] = {"step": "find"}

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "find")
def step_find(message):
    query = f"%{message.text}"
    cur.execute("SELECT name, phone, comment FROM clients WHERE phone LIKE %s", (query,))
    results = cur.fetchall()
    user_states.pop(message.chat.id, None)

    if results:
        for r in results:
            bot.send_message(message.chat.id, f"üë§ {r[0]}\nüìû {r[1]}\nüíà {r[2]}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# === –°–ü–ò–°–û–ö –ö–õ–ò–ï–ù–¢–û–í ===
@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def list_clients(message):
    cur.execute("SELECT name, phone, comment FROM clients ORDER BY created_at DESC LIMIT 10")
    clients = cur.fetchall()
    if clients:
        for c in clients:
            bot.send_message(message.chat.id, f"üë§ {c[0]}\nüìû {c[1]}\nüíà {c[2]}")
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

# === –≠–ö–°–ü–û–†–¢ ===
@bot.message_handler(func=lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
def export_clients(message):
    cur.execute("SELECT name, phone, comment, created_at FROM clients")
    data = cur.fetchall()
    df = pd.DataFrame(data, columns=["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–î–∞—Ç–∞"])
    file_path = "clients_export.xlsx"
    df.to_excel(file_path, index=False)

    with open(file_path, "rb") as file:
        bot.send_document(message.chat.id, file)

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ===
@bot.message_handler(func=lambda m: m.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def start_edit(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    user_states[message.chat.id] = {"step": "edit_find"}

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "edit_find")
def step_edit_find(message):
    query = f"%{message.text}"
    cur.execute("SELECT id, name, phone, comment FROM clients WHERE phone LIKE %s", (query,))
    result = cur.fetchone()
    if result:
        user_states[message.chat.id] = {
            "step": "edit_name", "id": result[0]
        }
        bot.send_message(message.chat.id, f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:\nüë§ {result[1]}\nüìû {result[2]}\nüíà {result[3]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "edit_name")
def edit_name(message):
    user_states[message.chat.id]["name"] = message.text
    user_states[message.chat.id]["step"] = "edit_phone"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "edit_phone")
def edit_phone(message):
    user_states[message.chat.id]["phone"] = message.text
    user_states[message.chat.id]["step"] = "edit_comment"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "edit_comment")
def edit_comment(message):
    state = user_states.pop(message.chat.id)
    cur.execute("UPDATE clients SET name=%s, phone=%s, comment=%s WHERE id=%s",
                (state["name"], state["phone"], message.text, state["id"]))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_menu())

# === –£–î–ê–õ–ï–ù–ò–ï ===
@bot.message_handler(func=lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
def delete_start(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    user_states[message.chat.id] = {"step": "delete_find"}

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "delete_find")
def delete_find(message):
    query = f"%{message.text}"
    cur.execute("SELECT id, name FROM clients WHERE phone LIKE %s", (query,))
    result = cur.fetchone()
    if result:
        user_states[message.chat.id] = {"step": "confirm_delete", "id": result[0]}
        bot.send_message(message.chat.id, f"–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {result[1]}? (–¥–∞/–Ω–µ—Ç)")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "confirm_delete")
def confirm_delete(message):
    if message.text.lower() == "–¥–∞":
        client_id = user_states[message.chat.id]["id"]
        cur.execute("DELETE FROM clients WHERE id=%s", (client_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
    user_states.pop(message.chat.id, None)

# === –í–ï–ë–•–£–ö ===
bot.remove_webhook()
import time; time.sleep(1)
bot.set_webhook(url=WEBHOOK_URL)

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    serve(app, host="0.0.0.0", port=10000)
