import telebot
import os
import logging
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ—Ä—Ç 10000 –æ—Ç–∫—Ä—ã—Ç."

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == '__main__':
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        # –î–ª—è Render Web Service
        import threading
        threading.Thread(
            target=app.run,
            kwargs={'host':'0.0.0.0','port':10000}
        ).start()
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        exit(1)
