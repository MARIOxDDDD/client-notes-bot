import telebot
import json
import os
import time
import pandas as pd
from flask import Flask, request
from telebot import types
from waitress import serve

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
WEBHOOK_URL = f"https://clientnotesmarioxd.onrender.com/{TOKEN}"
DATA_FILE = "clients.json"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –•–†–ê–ù–ò–õ–ò–©–ê ===
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump([], f)

# === –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ===
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ù–∞–π—Ç–∏")
    markup.row("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å")
    markup.row("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
    return markup

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def load_clients():
    with open(DATA_FILE, 'r') as f:
        return json.load(f)

def save_clients(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# === –ö–û–ú–ê–ù–î–ê /start ===
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
user_state = {}

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê ===
@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_client(message):
    user_state[message.chat.id] = {"action": "add"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("action") == "add_name")
def get_phone(message):
    user_state[message.chat.id]["name"] = message.text
    user_state[message.chat.id]["action"] = "add_phone"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("action") == "add_phone")
def get_comment(message):
    user_state[message.chat.id]["phone"] = message.text
    user_state[message.chat.id]["action"] = "add_comment"
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("action") == "add_comment")
def save_client(message):
    user = user_state[message.chat.id]
    clients = load_clients()
    clients.append({
        "name": user["name"],
        "phone": user["phone"],
        "comment": message.text
    })
    save_clients(clients)
    user_state.pop(message.chat.id)
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("action") == "add")
def get_name(message):
    user_state[message.chat.id]["action"] = "add_name"
    get_phone(message)

# === –ü–û–ò–°–ö –ö–õ–ò–ï–ù–¢–ê ===
@bot.message_handler(func=lambda msg: msg.text == "üîç –ù–∞–π—Ç–∏")
def search_client(message):
    user_state[message.chat.id] = {"action": "search"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("action") == "search")
def do_search(message):
    digits = message.text.strip()[-4:]
    clients = load_clients()
    found = [c for c in clients if c["phone"][-4:] == digits]
    if found:
        for c in found:
            bot.send_message(message.chat.id, f"üë§ {c['name']}\nüìû {c['phone']}\nüí¨ {c['comment']}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    user_state.pop(message.chat.id)

# === –°–ü–ò–°–û–ö –ö–õ–ò–ï–ù–¢–û–í ===
@bot.message_handler(func=lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def list_clients(message):
    clients = load_clients()
    if clients:
        for c in clients:
            bot.send_message(message.chat.id, f"üë§ {c['name']}\nüìû {c['phone']}\nüí¨ {c['comment']}")
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê ===
@bot.message_handler(func=lambda msg: msg.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def edit_client(message):
    user_state[message.chat.id] = {"action": "edit"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("action") == "edit")
def get_edit_comment(message):
    digits = message.text.strip()[-4:]
    user_state[message.chat.id] = {"action": "edit_comment", "digits": digits}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("action") == "edit_comment")
def do_edit(message):
    data = user_state.pop(message.chat.id)
    clients = load_clients()
    found = False
    for c in clients:
        if c["phone"][-4:] == data["digits"]:
            c["comment"] = message.text
            found = True
    if found:
        save_clients(clients)
        bot.send_message(message.chat.id, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# === –£–î–ê–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê ===
@bot.message_handler(func=lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
def delete_client(message):
    user_state[message.chat.id] = {"action": "delete"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("action") == "delete")
def do_delete(message):
    digits = message.text.strip()[-4:]
    clients = load_clients()
    updated = [c for c in clients if c["phone"][-4:] != digits]
    if len(updated) < len(clients):
        save_clients(updated)
        bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    user_state.pop(message.chat.id)

# === –≠–ö–°–ü–û–†–¢ –í EXCEL ===
@bot.message_handler(func=lambda msg: msg.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
def export_excel(message):
    clients = load_clients()
    if not clients:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    df = pd.DataFrame(clients)
    file_path = "clients.xlsx"
    df.to_excel(file_path, index=False)
    with open(file_path, 'rb') as f:
        bot.send_document(message.chat.id, f)
    os.remove(file_path)

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–ï–ë–•–£–ö–ê ===
@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"

# === –ó–ê–ü–£–°–ö (Webhook) ===
bot.remove_webhook()
time.sleep(1)
bot.set_webhook(url=WEBHOOK_URL)

if __name__ == "__main__":
    serve(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
