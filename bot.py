import os
import json
import telebot
from flask import Flask, request, send_file
from waitress import serve
import pandas as pd
from telebot import types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
WEBHOOK_URL = "https://clientnotesmarioxd.onrender.com/8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
JSON_FILE = "clients.json"
EXCEL_FILE = "clients.xlsx"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(JSON_FILE):
    with open(JSON_FILE, 'w') as f:
        json.dump([], f)

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def load_clients():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ JSON"""
    with open(JSON_FILE, 'r') as f:
        return json.load(f)

def save_clients(clients):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ JSON"""
    with open(JSON_FILE, 'w') as f:
        json.dump(clients, f, indent=2)

def find_clients_by_phone(last_digits):
    """–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–∏—Ñ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    clients = load_clients()
    return [c for c in clients if str(c['phone']).endswith(last_digits)]

def generate_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å'), types.KeyboardButton('üîç –ù–∞–π—Ç–∏'))
    markup.row(types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤'), types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'))
    markup.row(types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å'), types.KeyboardButton('üì§ –≠–∫—Å–ø–æ—Ä—Ç'))
    return markup

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return "OK", 200

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.send_message(message.chat.id, 
                    "üìí *Client Notes Mario Bot* –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=generate_keyboard(),
                    parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å')
def add_client_start(message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, add_client_name)

def add_client_name(message):
    """–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏"""
    if not message.text:
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=generate_keyboard())
        return
    
    client = {'name': message.text}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    bot.register_next_step_handler(msg, add_client_phone, client)

def add_client_phone(message, client):
    """–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!", reply_markup=generate_keyboard())
        return
    
    client['phone'] = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Å—Ç—Ä–∏–∂–∫–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏):")
    bot.register_next_step_handler(msg, add_client_finish, client)

def add_client_finish(message, client):
    """–®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    client['description'] = message.text
    clients = load_clients()
    clients.append(client)
    save_clients(clients)
    
    bot.send_message(message.chat.id, 
                    f"‚úÖ –ö–ª–∏–µ–Ω—Ç *{client['name']}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                    reply_markup=generate_keyboard(),
                    parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.text == 'üîç –ù–∞–π—Ç–∏')
def find_client_start(message):
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, find_client_result)

def find_client_result(message):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    clients = find_clients_by_phone(message.text)
    if not clients:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=generate_keyboard())
        return
    
    response = "üîç *–ù–∞–π–¥–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã:*\n\n"
    for client in clients:
        response += (f"üë§ *–ò–º—è:* {client['name']}\n"
                    f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {client['phone']}\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {client['description']}\n\n")
    
    bot.send_message(message.chat.id, response, reply_markup=generate_keyboard(), parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.text == 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤')
def list_clients(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    clients = load_clients()
    if not clients:
        bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç", reply_markup=generate_keyboard())
        return
    
    response = "üìã *–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n"
    for client in clients:
        response += (f"üë§ *{client['name']}*\n"
                    f"üìû {client['phone']}\n"
                    f"üìù {client['description']}\n\n")
    
    bot.send_message(message.chat.id, response, reply_markup=generate_keyboard(), parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
def edit_client_start(message):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, edit_client_select)

def edit_client_select(message):
    """–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    clients = find_clients_by_phone(message.text)
    if not clients:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=generate_keyboard())
        return
    
    if len(clients) > 1:
        response = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
        for i, client in enumerate(clients, 1):
            response += f"{i}. {client['name']} - {client['phone']}\n"
        msg = bot.send_message(message.chat.id, response + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, edit_client_choose_from_list, clients)
    else:
        msg = bot.send_message(message.chat.id, f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {clients[0]['name']}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        bot.register_next_step_handler(msg, edit_client_finish, clients[0])

def edit_client_choose_from_list(message, clients):
    """–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        index = int(message.text) - 1
        if 0 <= index < len(clients):
            msg = bot.send_message(message.chat.id, f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {clients[index]['name']}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            bot.register_next_step_handler(msg, edit_client_finish, clients[index])
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä", reply_markup=generate_keyboard())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=generate_keyboard())

def edit_client_finish(message, client):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    clients = load_clients()
    for i, c in enumerate(clients):
        if c['phone'] == client['phone']:
            clients[i]['description'] = message.text
            break
    
    save_clients(clients)
    bot.send_message(message.chat.id, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=generate_keyboard())

@bot.message_handler(func=lambda m: m.text == '‚ùå –£–¥–∞–ª–∏—Ç—å')
def delete_client_start(message):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, delete_client_confirm)

def delete_client_confirm(message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    clients = find_clients_by_phone(message.text)
    if not clients:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=generate_keyboard())
        return
    
    markup = types.InlineKeyboardMarkup()
    for client in clients:
        markup.add(types.InlineKeyboardButton(
            text=f"–£–¥–∞–ª–∏—Ç—å {client['name']} ({client['phone']})",
            callback_data=f"delete_{client['phone']}"))
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_client_final(call):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
    phone = call.data.split('_')[1]
    clients = load_clients()
    clients = [c for c in clients if c['phone'] != phone]
    save_clients(clients)
    
    bot.edit_message_text("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω", call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=generate_keyboard())

@bot.message_handler(func=lambda m: m.text == 'üì§ –≠–∫—Å–ø–æ—Ä—Ç')
def export_clients(message):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
    try:
        clients = load_clients()
        if not clients:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", reply_markup=generate_keyboard())
            return
        
        df = pd.DataFrame(clients)
        df.to_excel(EXCEL_FILE, index=False)
        
        with open(EXCEL_FILE, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="üì§ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", reply_markup=generate_keyboard())

# ========== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ==========
if __name__ == '__main__':
    print("–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫...")
    bot.remove_webhook()
    time.sleep(1)
    
    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    bot.set_webhook(url=WEBHOOK_URL)
    
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    serve(app, host="0.0.0.0", port=10000)
