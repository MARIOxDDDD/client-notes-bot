import telebot
from telebot import types
import sqlite3
import pandas as pd
import os

# üîê –í–∞—à —Ç–æ–∫–µ–Ω
TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
bot = telebot.TeleBot(TOKEN)

# üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('clients.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    phone TEXT,
    description TEXT
)
''')
conn.commit()

# üìç –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_state = {}
temp_data = {}

# üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ù–∞–π—Ç–∏")
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    markup.add("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_client_start(message):
    user_state[message.chat.id] = "add_name"
    temp_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == "add_name")
def add_phone(message):
    temp_data[message.chat.id]['name'] = message.text
    user_state[message.chat.id] = "add_phone"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == "add_phone")
def add_description(message):
    temp_data[message.chat.id]['phone'] = message.text
    user_state[message.chat.id] = "add_description"
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == "add_description")
def save_client(message):
    temp_data[message.chat.id]['description'] = message.text
    data = temp_data.pop(message.chat.id)
    user_state.pop(message.chat.id)

    cursor.execute("INSERT INTO clients (name, phone, description) VALUES (?, ?, ?)",
                   (data['name'], data['phone'], data['description']))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())

# üîç –ü–æ–∏—Å–∫
@bot.message_handler(func=lambda m: m.text == "üîç –ù–∞–π—Ç–∏")
def search_start(message):
    user_state[message.chat.id] = "search"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == "search")
def search_client(message):
    query = message.text
    cursor.execute("SELECT * FROM clients WHERE phone LIKE ?", (f"%{query}",))
    results = cursor.fetchall()
    user_state.pop(message.chat.id, None)

    if results:
        for row in results:
            bot.send_message(message.chat.id, f"üë§ {row[1]}\nüì± {row[2]}\n‚úèÔ∏è {row[3]}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö
@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def list_clients(message):
    cursor.execute("SELECT * FROM clients")
    clients = cursor.fetchall()
    if clients:
        for client in clients:
            bot.send_message(message.chat.id, f"üë§ {client[1]}\nüì± {client[2]}\n‚úèÔ∏è {client[3]}")
    else:
        bot.send_message(message.chat.id, "üì≠ –ö–ª–∏–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def edit_start(message):
    user_state[message.chat.id] = "edit_number"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == "edit_number")
def edit_choose_field(message):
    query = message.text
    cursor.execute("SELECT * FROM clients WHERE phone LIKE ?", (f"%{query}",))
    results = cursor.fetchall()

    if results:
        temp_data[message.chat.id] = {"id": results[0][0]}
        user_state[message.chat.id] = "edit_field"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–û–ø–∏—Å–∞–Ω–∏–µ")
        bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_state.pop(message.chat.id, None)

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == "edit_field")
def edit_value(message):
    temp_data[message.chat.id]["field"] = message.text.lower()
    user_state[message.chat.id] = "edit_value"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == "edit_value")
def apply_edit(message):
    client_id = temp_data[message.chat.id]["id"]
    field = temp_data[message.chat.id]["field"]
    value = message.text
    field_map = {"–∏–º—è": "name", "—Ç–µ–ª–µ—Ñ–æ–Ω": "phone", "–æ–ø–∏—Å–∞–Ω–∏–µ": "description"}

    if field in field_map:
        cursor.execute(f"UPDATE clients SET {field_map[field]} = ? WHERE id = ?", (value, client_id))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ.")
    
    user_state.pop(message.chat.id, None)
    temp_data.pop(message.chat.id, None)

# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
def delete_start(message):
    user_state[message.chat.id] = "delete"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == "delete")
def delete_client(message):
    query = message.text
    cursor.execute("DELETE FROM clients WHERE phone LIKE ?", (f"%{query}",))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω).", reply_markup=main_menu())
    user_state.pop(message.chat.id, None)

# üì§ –≠–∫—Å–ø–æ—Ä—Ç
@bot.message_handler(func=lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
def export_clients(message):
    cursor.execute("SELECT * FROM clients")
    data = cursor.fetchall()
    if not data:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    df = pd.DataFrame(data, columns=["ID", "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–û–ø–∏—Å–∞–Ω–∏–µ"])
    path = f"clients_export_{message.chat.id}.xlsx"
    df.to_excel(path, index=False)

    with open(path, "rb") as f:
        bot.send_document(message.chat.id, f)

    os.remove(path)

# üöÄ –ó–∞–ø—É—Å–∫
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
