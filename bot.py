from flask import Flask, request
import telebot
import os
import time
import csv
from tinydb import TinyDB, Query
from waitress import serve
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
SERVICE_NAME = "clientnotesbot-mario"
WEBHOOK_URL = f"https://{SERVICE_NAME}.onrender.com/{TOKEN}"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

db = TinyDB("clients.json")
user_states = {}

# ---------- –ú–µ–Ω—é ----------
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"),
        KeyboardButton("üîç –ù–∞–π—Ç–∏"),
    )
    markup.add(
        KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"),
        KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
        KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
    )
    markup.add(
        KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    )
    return markup

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ start ----------
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# ---------- –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ----------
@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_client(message):
    user_states[message.from_user.id] = {}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_states[message.from_user.id]["name"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, get_phone)

def get_phone(message):
    user_states[message.from_user.id]["phone"] = message.text
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
    bot.register_next_step_handler(message, get_comment)

def get_comment(message):
    user_id = message.from_user.id
    user_states[user_id]["comment"] = message.text
    db.insert(user_states[user_id])
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())
    del user_states[user_id]

# ---------- –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ ----------
@bot.message_handler(func=lambda msg: msg.text == "üîç –ù–∞–π—Ç–∏")
def find_client(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")
    bot.register_next_step_handler(message, search_by_phone)

def search_by_phone(message):
    query = Query()
    results = db.search(query.phone.test(lambda x: x.endswith(message.text)))
    if results:
        for client in results:
            bot.send_message(message.chat.id, f"üë§ {client['name']}\nüì± {client['phone']}\n‚úÇÔ∏è {client['comment']}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# ---------- –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ----------
@bot.message_handler(func=lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def list_clients(message):
    clients = db.all()
    if not clients:
        bot.send_message(message.chat.id, "üì≠ –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return
    text = "\n\n".join([f"üë§ {c['name']}\nüì± {c['phone']}\n‚úÇÔ∏è {c['comment']}" for c in clients])
    bot.send_message(message.chat.id, text)

# ---------- –≠–∫—Å–ø–æ—Ä—Ç ----------
@bot.message_handler(func=lambda msg: msg.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
def export_excel(message):
    filename = "clients_export.csv"
    with open(filename, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
        for c in db.all():
            writer.writerow([c["name"], c["phone"], c["comment"]])
    with open(filename, "rb") as file:
        bot.send_document(message.chat.id, file)

# ---------- –í–µ–±—Ö—É–∫ ----------
bot.remove_webhook()
time.sleep(1)
bot.set_webhook(url=WEBHOOK_URL)

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Render!", 200

if __name__ == "__main__":
    serve(app, host="0.0.0.0", port=10000)
