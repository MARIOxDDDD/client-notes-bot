import telebot
from telebot import types
from flask import Flask, request
from waitress import serve
import psycopg2
import pandas as pd
import os
from io import BytesIO

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)
WEBHOOK_URL = f"https://client-notes-bot.onrender.com/{TOKEN}"

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
DB_URL = "postgresql://client_notes_db_user:ujSU0BBRQ6swQwzRLwZ315LFWmYomGcn@dpg-d0p2rnuuk2gs7398b9s0-a/client_notes_db"
conn = psycopg2.connect(DB_URL, sslmode='require')
cur = conn.cursor()

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ===
cur.execute("""
CREATE TABLE IF NOT EXISTS clients (
    id SERIAL PRIMARY KEY,
    name TEXT,
    phone TEXT,
    notes TEXT
);
""")
conn.commit()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ù–∞–π—Ç–∏")
    markup.row("üìã –°–ø–∏—Å–æ–∫", "üìÉ –≠–∫—Å–ø–æ—Ä—Ç")
    markup.row("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
    return markup

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
user_state = {}

# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ===
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_client(message):
    user_state[message.chat.id] = {"action": "add"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "add" and "name" not in user_state[m.chat.id])
def get_name(message):
    user_state[message.chat.id]["name"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "add" and "phone" not in user_state[m.chat.id])
def get_phone(message):
    user_state[message.chat.id]["phone"] = message.text
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "add" and "notes" not in user_state[m.chat.id])
def get_notes(message):
    data = user_state[message.chat.id]
    data["notes"] = message.text
    cur.execute("INSERT INTO clients (name, phone, notes) VALUES (%s, %s, %s)", (data["name"], data["phone"], data["notes"]))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=main_keyboard())
    user_state.pop(message.chat.id)

# === –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ ===
@bot.message_handler(func=lambda m: m.text == "üîç –ù–∞–π—Ç–∏")
def search_prompt(message):
    user_state[message.chat.id] = {"action": "search"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "search")
def perform_search(message):
    query = f"%{message.text[-4:]}%"
    cur.execute("SELECT name, phone, notes FROM clients WHERE phone LIKE %s", (query,))
    results = cur.fetchall()
    if results:
        for r in results:
            bot.send_message(message.chat.id, f"üë§ {r[0]}\nüìû {r[1]}\nüí¨ {r[2]}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    user_state.pop(message.chat.id)

# === –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫")
def list_clients(message):
    cur.execute("SELECT name, phone FROM clients")
    rows = cur.fetchall()
    if rows:
        text = "\n".join([f"{i+1}. {r[0]} ({r[1]})" for i, r in enumerate(rows)])
        bot.send_message(message.chat.id, f"üë• –ö–ª–∏–µ–Ω—Ç—ã:\n{text}")
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

# === –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ===
@bot.message_handler(func=lambda m: m.text == "üìÉ –≠–∫—Å–ø–æ—Ä—Ç")
def export_excel(message):
    cur.execute("SELECT name, phone, notes FROM clients")
    rows = cur.fetchall()
    df = pd.DataFrame(rows, columns=["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    bio = BytesIO()
    bio.name = "clients.xlsx"
    df.to_excel(bio, index=False)
    bio.seek(0)
    bot.send_document(message.chat.id, bio)

# === –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ===
@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
def delete_prompt(message):
    user_state[message.chat.id] = {"action": "delete"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "delete")
def delete_client(message):
    query = f"%{message.text[-4:]}%"
    cur.execute("DELETE FROM clients WHERE phone LIKE %s", (query,))
    deleted = cur.rowcount
    conn.commit()
    if deleted:
        bot.send_message(message.chat.id, f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted} –∫–ª–∏–µ–Ω—Ç(–æ–≤).")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    user_state.pop(message.chat.id)

# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def edit_prompt(message):
    user_state[message.chat.id] = {"action": "edit"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "edit" and "target" not in user_state[m.chat.id])
def edit_target(message):
    query = f"%{message.text[-4:]}%"
    cur.execute("SELECT id, name, phone, notes FROM clients WHERE phone LIKE %s", (query,))
    result = cur.fetchone()
    if result:
        user_state[message.chat.id]["target"] = result[0]
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_state.pop(message.chat.id)

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "edit" and "new_name" not in user_state[m.chat.id])
def edit_name(message):
    user_state[message.chat.id]["new_name"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "edit" and "new_phone" not in user_state[m.chat.id])
def edit_phone(message):
    user_state[message.chat.id]["new_phone"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("action") == "edit" and "new_notes" not in user_state[m.chat.id])
def edit_notes(message):
    state = user_state[message.chat.id]
    cur.execute(
        "UPDATE clients SET name = %s, phone = %s, notes = %s WHERE id = %s",
        (state["new_name"], state["new_phone"], message.text, state["target"])
    )
    conn.commit()
    bot.send_message(message.chat.id, "‚úèÔ∏è –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_keyboard())
    user_state.pop(message.chat.id)

# === –í–µ–±—Ö—É–∫ –¥–ª—è Render ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    serve(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
