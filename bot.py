import telebot
import json
import os
from telebot import types
from flask import Flask, request
from waitress import serve

TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)
DATA_FILE = "clients.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã
def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

clients = load_data()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ù–∞–π—Ç–∏")
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_client(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, get_name)

def get_name(message):
    name = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(msg, get_phone, name)

def get_phone(message, name):
    phone = message.text
    msg = bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
    bot.register_next_step_handler(msg, save_client, name, phone)

def save_client(message, name, phone):
    info = message.text
    clients[phone] = {"name": name, "info": info}
    save_data(clients)
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=main_menu())

# üîç –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º
@bot.message_handler(func=lambda m: m.text == "üîç –ù–∞–π—Ç–∏")
def find_client(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")
    bot.register_next_step_handler(msg, search_by_phone)

def search_by_phone(message):
    part = message.text.strip()[-4:]
    found = [f"üìå {data['name']} ‚Äî {phone}\nüí¨ {data['info']}" for phone, data in clients.items() if phone.endswith(part)]
    if found:
        bot.send_message(message.chat.id, "\n\n".join(found), reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())

# üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def list_clients(message):
    if not clients:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=main_menu())
        return
    result = "\n\n".join([f"üìå {d['name']} ‚Äî {p}\nüí¨ {d['info']}" for p, d in clients.items()])
    bot.send_message(message.chat.id, result, reply_markup=main_menu())

# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def ask_edit(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, edit_client)

def edit_client(message):
    phone = message.text
    if phone not in clients:
        bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–∏–Ω—Ñ–æ:")
    bot.register_next_step_handler(msg, save_edit, phone)

def save_edit(message, phone):
    clients[phone]['info'] = message.text
    save_data(clients)
    bot.send_message(message.chat.id, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu())

# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ
@bot.message_handler(func=lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
def ask_delete(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, delete_client)

def delete_client(message):
    phone = message.text
    if phone in clients:
        del clients[phone]
        save_data(clients)
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())

# Webhook
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    bot.remove_webhook()
    import time
    time.sleep(1)
    bot.set_webhook(url="https://client-notes-bot.onrender.com/" + TOKEN)
    serve(app, host="0.0.0.0", port=10000)
