from telebot import TeleBot, types
import psycopg2
import pandas as pd
import os
from datetime import datetime

TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
bot = TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
conn = psycopg2.connect("postgresql://client_notes_db_user:ujSU0BBRQ6swQwzRLwZ315LFWmYomGcn@dpg-d0p2rnuuk2gs7398b9s0-a/client_notes_db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS clients (
        id SERIAL PRIMARY KEY,
        name TEXT,
        phone TEXT,
        comment TEXT
    )
''')
conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ù–∞–π—Ç–∏")
    markup.row("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å")
    markup.row("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
    return markup

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}
temp_data = {}

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_client(message):
    user_state[message.chat.id] = "add_name"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "add_name")
def add_name(message):
    temp_data[message.chat.id] = {"name": message.text}
    user_state[message.chat.id] = "add_phone"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "add_phone")
def add_phone(message):
    temp_data[message.chat.id]["phone"] = message.text
    user_state[message.chat.id] = "add_comment"
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "add_comment")
def add_comment(message):
    data = temp_data.pop(message.chat.id)
    data["comment"] = message.text
    cursor.execute("INSERT INTO clients (name, phone, comment) VALUES (%s, %s, %s)",
                   (data["name"], data["phone"], data["comment"]))
    conn.commit()
    user_state.pop(message.chat.id)
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üîç –ù–∞–π—Ç–∏")
def find_client(message):
    user_state[message.chat.id] = "find"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "find")
def do_find(message):
    digits = message.text[-4:]
    cursor.execute("SELECT name, phone, comment FROM clients WHERE phone LIKE %s", ('%' + digits,))
    results = cursor.fetchall()
    user_state.pop(message.chat.id)

    if results:
        for row in results:
            bot.send_message(message.chat.id, f"üë§ {row[0]}\nüìû {row[1]}\nüí¨ {row[2]}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(func=lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def list_clients(message):
    cursor.execute("SELECT name, phone FROM clients")
    rows = cursor.fetchall()
    if not rows:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        reply = "\n\n".join([f"üë§ {name} ‚Äî üìû {phone}" for name, phone in rows])
        bot.send_message(message.chat.id, reply)

@bot.message_handler(func=lambda msg: msg.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
def export_clients(message):
    cursor.execute("SELECT name, phone, comment FROM clients")
    rows = cursor.fetchall()

    if not rows:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    df = pd.DataFrame(rows, columns=["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    filename = f"clients_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    df.to_excel(filename, index=False)

    with open(filename, "rb") as file:
        bot.send_document(message.chat.id, file)

    os.remove(filename)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@bot.message_handler(func=lambda msg: msg.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def edit_placeholder(message):
    bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
def delete_placeholder(message):
    bot.send_message(message.chat.id, "üóëÔ∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –ó–∞–ø—É—Å–∫
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.polling(none_stop=True)
