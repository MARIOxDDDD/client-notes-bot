import os
import telebot
from telebot import types
from flask import Flask, request
from waitress import serve
from tinydb import TinyDB, Query
import time
import openpyxl
from telebot.types import InputFile

TOKEN = "8036531554:AAGyyLFsy8LyW--jPsdZuqnSl-3AfcAFWz0"
SERVICE_NAME = "client-notes-bot"
WEBHOOK_URL = f"https://{SERVICE_NAME}.onrender.com/{TOKEN}"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
db = TinyDB(os.path.join(BASE_DIR, 'clients.json'))
User = Query()

# –£–¥–∞–ª–∏–º –≤–µ–±—Ö—É–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤—ã–π
bot.remove_webhook()
time.sleep(1)
bot.set_webhook(url=WEBHOOK_URL)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ù–∞–π—Ç–∏")
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "‚ùå –£–¥–∞–ª–∏—Ç—å")
    markup.add("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    return markup

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
client_data = {}

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_client(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    client_data["name"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, get_phone)

def get_phone(message):
    client_data["phone"] = message.text
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
    bot.register_next_step_handler(message, get_comment)

def get_comment(message):
    client_data["comment"] = message.text
    db.insert(client_data.copy())
    bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())

# –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda msg: msg.text == "üîç –ù–∞–π—Ç–∏")
def find_client(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞:")
    bot.register_next_step_handler(message, search_client)

def search_client(message):
    query = message.text.strip()
    results = db.search(User.phone.test(lambda val: val.endswith(query)))
    if results:
        response = "üîé –ù–∞–π–¥–µ–Ω–æ:\n\n"
        for c in results:
            response += f"üë§ {c['name']}\nüì± {c['phone']}\nüí¨ {c['comment']}\n\n"
    else:
        response = "‚ùóÔ∏è–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
    bot.send_message(message.chat.id, response, reply_markup=main_menu())

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def show_all(message):
    clients = db.all()
    if clients:
        msg = "üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n"
        for c in clients:
            msg += f"üë§ {c['name']}\nüì± {c['phone']}\nüí¨ {c['comment']}\n\n"
    else:
        msg = "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    bot.send_message(message.chat.id, msg, reply_markup=main_menu())

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
def delete_client(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, delete_by_last_digits)

def delete_by_last_digits(message):
    query = message.text.strip()
    deleted = db.remove(User.phone.test(lambda val: val.endswith(query)))
    if deleted:
        bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "‚ùóÔ∏è–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
@bot.message_handler(func=lambda msg: msg.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
def export_excel(message):
    clients = db.all()
    if not clients:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ö–ª–∏–µ–Ω—Ç—ã"
    ws.append(["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    for c in clients:
        ws.append([c["name"], c["phone"], c["comment"]])

    file_path = os.path.join(BASE_DIR, "clients_export.xlsx")
    wb.save(file_path)

    with open(file_path, "rb") as f:
        bot.send_document(message.chat.id, InputFile(f, filename="–ö–ª–∏–µ–Ω—Ç—ã.xlsx"))

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    serve(app, host="0.0.0.0", port=10000)
